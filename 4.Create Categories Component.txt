NB ::: Files should be created in small casing

1. Create a new folder inside app called features -> create a category folder inside features

-> Use CMD to navigate inside the folder and create a component for the list of categories

->ng g c category-list

2. add html to category.html

<div class="container">
<h1 class="mt-3">Category List</h1>

<div class="d-flex justify-content-end mt-3">
    <a href="" class="btn btn-primary">Add Category</a>
</div>
</div>

3.Add route on "app-routing.module.ts"  so we can navigate to the component

import { CategoryListComponent } from './features/category/category-list/category-list.component';

const routes: Routes = [
  {
    path: 'admin/categories',  
    component : CategoryListComponent // comes from category-list.component.ts
  }
];

4. Add the Href on the NavBar component.html

<li><a class="dropdown-item" href="admin/categories">Categories</a></li> This will reload the page, NOT recommended

<li><a class="dropdown-item" routerLink="admin/categories">Categories</a></li>  This is for SPA  RECOMMENDED    (no page reload)

<li><a class="dropdown-item" [routerLink]="['admin/categories']">Categories</a></li>  RECOMMENDED

5.Create Category page : -> navigate to category folder using CMD

->C:\Code\Repos\Angular Latest\UI\AngularUI\src\app\features\category

->ng g c add-category

6.On the List button, add the routerLink on anchor

<div class="container">
<h1 class="mt-3">Category List</h1>

<div class="d-flex justify-content-end mt-3">
    <a [routerLink]="['/admin/categories/add']" class="btn btn-primary bg-dark">Add Category</a>
</div>
</div>

7. Add the link on app-routing.module

const routes: Routes = [
  {
    path: 'admin/categories',
    component : CategoryListComponent
  },
  {
    path : 'admin/categories/add',
    component : AddCategoryComponent
  }
];

8. Add Create View HTML

<div class="container">
<h1 class="mt-3">Add Category</h1>

<form>
    <div class="mt-2">
<div class="mt-3">
    <label class="form-label"> Category Name</label>
    <input type="text" id="categoryName" class="form-control">
</div>
<div class="mt-3">
    <label class="form-label"> Url Handle</label>
    <input type="text" id="categoryUrlHandle" class="form-control">
</div>
<div class="mt-3">
<button type="submit" class="btn btn-primary bg-dark">Submit</button> 
</div>
    </div>
</form>
</div>

9.Submit Form Data

-> Open app.module.ts

Add a FormsModule under imports
 
import { FormsModule } from '@angular/forms';   //Required to do form submitions from the UI
 
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule
  ],

modify form to below 

<form #form="ngForm" (ngSubmit)="onFormSubmit()">
    <div class="mt-2">
<div class="mt-3">
    <label class="form-label"> Category Name</label>
    <input type="text" id="categoryName" class="form-control">
</div>
<div class="mt-3">
    <label class="form-label"> Url Handle</label>
    <input type="text" id="categoryUrlHandle" class="form-control">
</div>
<div class="mt-3">
<button type="submit" class="btn btn-primary bg-dark">Submit</button> 
</div>
    </div>
</form>
</div>


10. Add new model folder inside category folder  ("add-category-request.model.ts")

export interface AddCategoryRequest{
    name: string;
    urlHandle: string;
}

11. Open add-category.components.ts (typescript to add API Call) add function inside the export component

export class AddCategoryComponent {

  model: AddCategoryRequest;

constructor(){
  this.model = {
    name:'',
    urlHandle:''
  }
}
  onFormSubmit(){
  }
}

12. Bind View to model (2 way data binding) -- update input elements

<div class="mt-3">
    <label class="form-label"> Category Name</label>
    <input type="text" id="categoryName" class="form-control" name="categoryName" [(ngModel)]="model.name">
</div>
<div class="mt-3">
    <label class="form-label"> Url Handle</label>
    <input type="text" id="categoryUrlHandle" class="form-control" name="categoryUrlHandle" [(ngModel)]="model.urlHandle">
</div>


13. Create new service folder inside Category folder and use CMD to naviagte to the folder :-> used to communicate with 3rd parties

->cd C:\Code\Repos\Angular Latest\UI\AngularUI\src\app\features\category\services

->ng g s category    same as ng generate service category

14.Import Http client module -> app.module

import {HttpClientModule} from '@angular/common/http'

  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    HttpClientModule
  ],

15. Use httpClientModule to make 3rd party calls from the service

export class CategoryService {

  constructor(private http: HttpClient) { }

  addCategory(model: AddCategoryRequest): Observable<void>{

    return this.http.post<void>('https://localhost:7115/api/Categories/CreateCategory', model);
  }
}


16. We can now inject the service and use it from the component.ts

export class AddCategoryComponent implements OnDestroy {

  model: AddCategoryRequest;

  private addCategorySubscription?: Subscription;

constructor(private categoryService: CategoryService){
  this.model = {
    name:'',
    urlHandle:''
  }
}

  onFormSubmit(){
this.addCategorySubscription = this.categoryService.addCategory(this.model)
.subscribe({next: (response => {
console.log('happy');
}

)});
  }

  ngOnDestroy(): void {
    this.addCategorySubscription?.unsubscribe();
  }
}

17. Enable CORS on the Api side (in program.cs) after app.UseHttpsRedirection(); add the below options to allow CORS


app.UseCors(options =>
{
    options.AllowAnyHeader();
    options.AllowAnyMethod();
    options.AllowAnyOrigin();
});
